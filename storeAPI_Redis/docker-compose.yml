# docker-compose.yaml
version: '3.8'

services:
  mongo:
    image: mongo:latest
    container_name: storeAPI_Redis
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./data:/app/data


  redis:
    image: redis:7
    container_name: storeAPI_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - ./redis_data:/data
    command: ['redis-server', '--save', '60', '1', '--appendonly', 'yes']
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    ports:
      - 5540:5540
    volumes:
      - ./redisinsight_data:/db
    depends_on:
      redis:
        condition: service_healthy





  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - mongo

  python:
    build:
      context: .              #current folder ./storeAPI
      dockerfile: Dockerfile
    container_name: mypython
    ports:
      - "5000:5000"            # Expose Flask app
    volumes:
      - ./app:/app            # contains /data folder
    working_dir: /app
    depends_on:
      - mongo
    # command: python app.py       # start flask automatically when >> docker compose up

volumes:
  mongodb_data:
